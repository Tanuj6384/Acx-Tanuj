// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
// ------------------------SALES-----------------------
// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
#####################################################################################################
//......................................Sales header To Posted Sales Shipment Header........................................................................
    [EventSubscriber(ObjectType::Codeunit, Codeunit::"Sales-Post", 'OnAfterSalesShptHeaderInsert', '', false, false)]
    local procedure OnAfterSalesShptHeaderInsert(var SalesShipmentHeader: Record "Sales Shipment Header"; SalesHeader: Record "Sales Header"; SuppressCommit: Boolean; WhseShip: Boolean; WhseReceive: Boolean; var TempWhseShptHeader: Record "Warehouse Shipment Header"; var TempWhseRcptHeader: Record "Warehouse Receipt Header"; PreviewMode: Boolean)
    begin
        SalesShipmentHeader."No of BOX" := SalesHeader."No of BOX";
    end;
//......................................Sales header To Posted Sales Shipment Header........................................................................

######################################################################################################

//...........................................sales Line To Sales shipment line...................................................................................
    [EventSubscriber(ObjectType::Codeunit, Codeunit::"Sales-Post", 'OnBeforeSalesShptLineInsert', '', false, false)]
    local procedure OnBeforeSalesShptLineInsert(var SalesShptLine: Record "Sales Shipment Line"; SalesShptHeader: Record "Sales Shipment Header"; SalesLine: Record "Sales Line"; CommitIsSuppressed: Boolean; PostedWhseShipmentLine: Record "Posted Whse. Shipment Line"; SalesHeader: Record "Sales Header"; WhseShip: Boolean; WhseReceive: Boolean; ItemLedgShptEntryNo: Integer; xSalesLine: record "Sales Line"; var TempSalesLineGlobal: record "Sales Line" temporary; var IsHandled: Boolean)
    begin
        SalesShptLine.Box := SalesLine.Box;
    end;

######################################################################################################

//...........................................Sales Line to Warehouse Shipment Line...............................................................................
    [EventSubscriber(ObjectType::Codeunit, Codeunit::"Whse.-Create Source Document", OnAfterInitNewWhseShptLine, '', false, false)]
    local procedure "Whse.-Create Source Document_OnAfterInitNewWhseShptLine"(var WhseShptLine: Record "Warehouse Shipment Line"; WhseShptHeader: Record "Warehouse Shipment Header"; SalesLine: Record "Sales Line"; AssembleToOrder: Boolean)
    begin
        // Filter Sales Lines related to the Warehouse Shipment Header
        WhseShptLine.Box := 0;
        SalesLine.Reset();
        SalesLine.SetRange("Document No.", WhseShptLine."Source No.");
        SalesLine.SetRange("No.", WhseShptLine."Item No.");
        // SalesLine.SetRange("Line No.",WhseShptLine.);
        if SalesLine.FindFirst() then
            repeat
                WhseShptLine.QPB := SalesLine.QPB;
                WhseShptLine.Box := SalesLine.Box;
            until SalesLine.Next() = 0;
      end;
//...........................................Sales Line to Warehouse Shipment Line...............................................................................

######################################################################################################

//...........................................Sales invoice Header To Posted Sales Invoice Header..................................................................

    [EventSubscriber(ObjectType::Codeunit, Codeunit::"Sales-Post", 'OnAfterSalesInvHeaderInsert', '', false, false)]
    local procedure OnAfterSalesInvHeaderInsert(var SalesInvHeader: Record "Sales Invoice Header"; SalesHeader: Record "Sales Header"; CommitIsSuppressed: Boolean; WhseShip: Boolean; WhseReceive: Boolean; var TempWhseShptHeader: Record "Warehouse Shipment Header"; var TempWhseRcptHeader: Record "Warehouse Receipt Header"; PreviewMode: Boolean)
    begin
        SalesInvHeader."No. of Box" := SalesHeader."No. of Box";
    End;
//...........................................Sales invoice Header To Posted Sales Invoice Header..................................................................

######################################################################################################

//..........................................Sales invoice line To Posted Sales Invoice Line......................................................................
    [EventSubscriber(ObjectType::Codeunit, Codeunit::"Sales-Post", 'OnBeforeSalesInvLineInsert', '', false, false)]
    local procedure OnBeforeSalesInvLineInsert(var SalesInvLine: Record "Sales Invoice Line"; SalesInvHeader: Record "Sales Invoice Header"; SalesLine: Record "Sales Line"; CommitIsSuppressed: Boolean; var IsHandled: Boolean; PostingSalesLine: Record "Sales Line"; SalesShipmentHeader: Record "Sales Shipment Header"; SalesHeader: Record "Sales Header"; var ReturnReceiptHeader: Record "Return Receipt Header")
    begin
        SalesInvLine.Box := SalesLine.Box;
    end;
//...........................................Sales invoice line To Posted Sales Invoice Line......................................................................

######################################################################################################

// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
// ------------------------WAREHOUSE-----------------------
// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

######################################################################################################

    //...........................................Warehouse Shipment Header to Posted Warehouse Shipment Header.......................................................

    [EventSubscriber(ObjectType::Codeunit, Codeunit::"Whse.-Post Shipment", 'OnBeforePostedWhseShptHeaderInsert', '', false, false)]
    local procedure OnBeforePostedWhseShptHeaderInsert(var PostedWhseShipmentHeader: Record "Posted Whse. Shipment Header"; WarehouseShipmentHeader: Record "Warehouse Shipment Header")
    begin
        PostedWhseShipmentHeader."No. of (Boxes.)" := WarehouseShipmentHeader."No. of (Boxes.)";
        PostedWhseShipmentHeader."No. of Boxes(Loose)" := WarehouseShipmentHeader."No. of Boxes(Loose)";
        PostedWhseShipmentHeader."Total No. of Boxes" := WarehouseShipmentHeader."Total No. of Boxes";
        PostedWhseShipmentHeader."Transporter name" := WarehouseShipmentHeader."Transporter name";
        PostedWhseShipmentHeader."Transporter vehicle No." := WarehouseShipmentHeader."Transporter vehicle No.";
        PostedWhseShipmentHeader."LR Date" := WarehouseShipmentHeader."LR Date";
        PostedWhseShipmentHeader."LR No." := WarehouseShipmentHeader."LR No.";
    end;
//...........................................Warehouse Shipment Header to Posted Warehouse Shipment Header.......................................................

######################################################################################################
 //...........................................Warehouse Shipment Line to Posted Warehouse Shipment Line...........................................................
    [EventSubscriber(ObjectType::Codeunit, Codeunit::"Whse.-Post Shipment", 'OnAfterInitPostedShptLine', '', false, false)]
    local procedure OnAfterInitPostedShptLine(var WhseShipmentLine: Record "Warehouse Shipment Line"; var PostedWhseShipmentLine: Record "Posted Whse. Shipment Line")
    begin
        PostedWhseShipmentLine."OEM Std. Packing" := WhseShipmentLine."OEM Std. Packing";
        PostedWhseShipmentLine."Domestic Std. Packing" := WhseShipmentLine."Domestic Std. Packing";
        PostedWhseShipmentLine."Export Std. Packing" := WhseShipmentLine."Export Std. Packing";
        PostedWhseShipmentLine.QPB := WhseShipmentLine.QPB;
        PostedWhseShipmentLine.Box := WhseShipmentLine.Box;
        PostedWhseShipmentLine.Loose := WhseShipmentLine.Loose;
    end;
//...........................................Warehouse Shipment Line to Posted Warehouse Shipment Line............................................................

######################################################################################################

//...........................................Warehouse Shipment Header to Posted Sales Shipment Header...........................................................
    [EventSubscriber(ObjectType::Codeunit, Codeunit::"Sales-Post", OnBeforeSalesShptHeaderInsert, '', false, false)]
    local procedure OnBeforeSalesShptHeaderInsert(var SalesShptHeader: Record "Sales Shipment Header"; SalesHeader: Record "Sales Header"; CommitIsSuppressed: Boolean; var IsHandled: Boolean; var TempWhseRcptHeader: Record "Warehouse Receipt Header" temporary; WhseReceive: Boolean; var TempWhseShptHeader: Record "Warehouse Shipment Header" temporary; WhseShip: Boolean; InvtPickPutaway: Boolean);
    begin
        SalesShptHeader."No. of (Boxes.)" := TempWhseShptHeader."No. of (Boxes.)";
    end;
//...........................................Warehouse Shipment Header to Posted Sales Shipment Header...........................................................

######################################################################################################

//...........................................Warehouse Shipment Line to Posted Sales Shipment Line...............................................................
    [EventSubscriber(ObjectType::Codeunit, Codeunit::"Sales-Post", 'OnCheckPostWhseShptLinesOnAfterWhseShptLinesFound', '', true, true)]
    local procedure OnCheckPostWhseShptLinesOnAfterWhseShptLinesFound(var SalesShipmentLine: Record "Sales Shipment Line"; var SalesLine: Record "Sales Line"; var WhseShptLinesFound: Boolean; WarehouseShipmentHeader: Record "Warehouse Shipment Header"; WarehouseReceiptHeader: Record "Warehouse Receipt Header"; WhseShip: Boolean; WhseReceive: Boolean; var WarehouseShipmentLine: Record "Warehouse Shipment Line")
    begin
        SalesShipmentLine.Box := WarehouseShipmentLine.Box;
    end;
//...........................................Warehouse Shipment Line to Posted Sales Shipment Line...............................................................

######################################################################################################






######################################################################################################

//...........................................Warehouse Receipt Line To Purchase Line...................................................................................

    [EventSubscriber(ObjectType::Codeunit, Codeunit::"Whse.-Create Source Document", 'OnPurchLine2ReceiptLineOnAfterInitNewLine', '', false, false)]
    local procedure OnPurchLine2ReceiptLineOnAfterInitNewLine(var WhseReceiptLine: Record "Warehouse Receipt Line"; WhseReceiptHeader: Record "Warehouse Receipt Header"; PurchaseLine: Record Microsoft.Purchases.Document."Purchase Line"; var IsHandled: Boolean)
    begin
        WhseReceiptLine."Applicable For QC" := PurchaseLine."Applicable For QC";
        WhseReceiptLine."QC Templete code" := PurchaseLine."QC Templete code";
    end;
 //...........................................Warehouse Receipt Line To Purchase Line...............................................................................

######################################################################################################################
   //....................Sales Line To Unit of Measure....................//
    [EventSubscriber(ObjectType::Table, Database::"Sales Line", OnValidateUnitOfMeasureCodeOnAfterGetItemData, '', false, false)]
    local procedure "Sales Line_OnValidateUnitOfMeasureCodeOnAfterGetItemData"(var SalesLine: Record "Sales Line"; xSalesLine: Record "Sales Line"; Item: Record Item)
    var
        ItemUnitOfMeasureRec: Record "Item Unit of Measure";
        SalesLineDiscountRec: Record "Sales Line Discount";
        UnitofMeasure: Record "Unit of Measure";
        CalculateTax: Codeunit "Calculate Tax";
    begin
    end;
//....................Sales Line To Unit of Measure....................//
######################################################################################################################
